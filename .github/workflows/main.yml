name: MLOps Pipeline for Fake News Detection

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  pipeline:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Repository
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Step 2: Install Required Tools
    - name: Install Required Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl unzip wget

    # Step 3: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    # Step 4: Install Python Dependencies
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r instructions.txt

    # Step 5: Extract Dataset ZIP
    - name: Extract Dataset ZIP
      run: |
        mkdir -p dataset
        unzip fake_news_final.zip -d dataset/
        echo "Dataset extracted."

    # Step 6: Run Dataset Cleaning Script
    - name: Run Dataset Cleaning Script
      run: python scripts/clean_dataset.py

    # Step 7: Train ML Model
    - name: Train Model
      run: |
        python scripts/train_model.py
        echo "Model trained successfully."

    # Step 8: Build Docker Image
    - name: Build Docker Image
      run: docker build -t anmolmishra334/fake_news_detection:${{ github.run_number }} .

    # Step 9: Push Docker Image to DockerHub
    - name: Push Docker Image to DockerHub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker push anmolmishra334/fake_news_detection:${{ github.run_number }}

    # Step 10: Clear and Prepare Scan Results Folder
    - name: Clear Scan Results Folder
      run: |
        mkdir -p scan_results
        rm -rf scan_results/*

    # Step 11: Start SonarQube
    - name: Start SonarQube
      run: |
        docker run -d --name sonarqube -p 9000:9000 sonarqube
        echo "Waiting for SonarQube to start..."
        until curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; do
          sleep 5
        done

    # Step 12: Install Sonar Scanner CLI
    - name: Install Sonar Scanner CLI
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
        unzip sonar-scanner-cli-4.8.0.2856-linux.zip
        echo "$PWD/sonar-scanner-4.8.0.2856-linux/bin" >> $GITHUB_PATH

    # Step 13: Run SonarQube Scanner
    - name: Run SonarQube Scanner
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # <- You should create this token manually in SonarQube UI and add as secret
      run: |
        sonar-scanner \
          -Dsonar.projectKey=my_project \
          -Dsonar.sources=. \
          -Dsonar.host.url=http://localhost:9000 \
          -Dsonar.login=$SONAR_TOKEN

    # Step 14: Save SonarQube Report
    - name: Save SonarQube Report
      run: |
        cp .scannerwork/report-task.txt scan_results/sonarqube_report.txt

    # Step 15: Start OWASP ZAP
    - name: Start OWASP ZAP
      run: |
        docker run -u zap -p 8080:8080 --name owasp-zap -d owasp/zap2docker-stable
        echo "Waiting for OWASP ZAP to start..."
        sleep 30

    # Step 16: Run OWASP ZAP Scan
    - name: Run OWASP ZAP Scan
      run: |
        docker exec owasp-zap zap-baseline.py \
          -t http://localhost:5000 -r zap_report.html

    # Step 17: Save OWASP ZAP Report
    - name: Save OWASP ZAP Report
      run: |
        mv zap_report.html scan_results/zap_report.html

    # Step 18: Commit and Push Scan Results
    - name: Commit and Push Scan Results
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add scan_results
        git commit -m "Update scan results"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.PUSH_TOKEN }}

