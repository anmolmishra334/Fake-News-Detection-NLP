name: MLOps Pipeline for Fake News Detection

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  pipeline:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Repository
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Step 2: Install Dependencies
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r instructions.txt

    # Step 3: Extract ZIP File
    - name: Extract Dataset ZIP
      run: |
        mkdir dataset
        unzip fake_news_final.zip -d dataset/
        echo "Dataset extracted."

    # Step 4: Validate and Clean Dataset
    - name: Run Dataset Cleaning Script
      run: python scripts/clean_dataset.py

     # Step 5: Train ML Model
    - name: Train Model
      run: |
        python scripts/train_model.py

    # Step 6: Dockerize the Application
    - name: Build Docker Image
      run: docker build -t anmolmishra334/fake_news_detection:${{ github.run_number }} .
      
    # Step 7: Docker Image Push t DockerHub
    - name: Push Docker Image to DockerHub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker push  anmolmishra334/fake_news_detection:${{ github.run_number }}

    # Step 7: Pull the Latest Docker Image and Run App
    - name: Run Application
      run: |
        sleep 30
        docker pull anmolmishra334/fake_news_detection:${{ github.run_number }}
        docker run -d -p 5000:5000  anmolmishra334/fake_news_detection:${{ github.run_number }}

   # Step 8: Clear Contents of Scan Results Foder  
    - name: Prepare Output Directory
      run: |
        mkdir -p scan_results
        rm -rf scan_results/*
        
   # Step 9: SonarQube Scanner Setup on VM
    - name: Start SonarQube
      run: |
        docker run -d --name sonarqube -p 9000:9000 sonarqube
        echo "Waiting for SonarQube to start..."
        until curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; do
          sleep 5
        done
        
   # Step 10: Generate SonarQube Token
    - name: Generate SonarQube Token
  run: |
    curl -u admin:admin -X POST "http://localhost:9000/api/user_tokens/generate" \
      -d "name=GitHubActionsToken" > sonar_token.json
    jq -r '.token' sonar_token.json > sonar_token.txt
    echo "SONAR_TOKEN=$(cat sonar_token.txt)" >> $GITHUB_ENV
    
   # Step 11: Run SonarQube Scanner
    - name: Run SonarQube Scanner
  run: |
    sonar-scanner \
      -Dsonar.projectKey=my_project \
      -Dsonar.sources=. \
      -Dsonar.host.url=http://localhost:9000 \
      -Dsonar.login=$SONAR_TOKEN

          
   # Step 12: Save SonarQube Report
    - name: Save SonarQube Report
      run: |
        cp .scannerwork/report-task.txt scan_results/sonarqube_report.txt
  
  # Step 13: Start OWASP ZAP
    - name: Start OWASP ZAP
      run: |
        docker run -u zap -p 8080:8080 --name owasp-zap -d owasp/zap2docker-stable
        echo "Waiting for OWASP ZAP to start..."
        sleep 30
        
   # Step 14: Run OWASP ZAP Scan
    - name: Run OWASP ZAP Scan
      run: |
        docker exec owasp-zap zap-baseline.py \
          -t http://localhost:5000 -r zap_report.html
          
  # Step 15: Save OWASP ZAP Report
    - name: Save OWASP ZAP Report
      run: |
        mv zap_report.html scan_results/zap_report.html
        
 # Step 16: Commit and Push Scan Results
    - name: Commit and Push Scan Results
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add scan_results
        git commit -m "Update scan results"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.PUSH_TOKEN }}
    
    
   
